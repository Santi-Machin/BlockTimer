package com.blocktimer

import android.content.Context
import android.os.Build
import android.os.VibrationEffect
import android.os.Vibrator
import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.ScrollState
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.TextUnit
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat.getSystemService
import androidx.navigation.NavHostController
import com.blocktimer.ui.Block
import com.blocktimer.ui.theme.Black
import com.blocktimer.ui.theme.BlockTimerTheme
import com.blocktimer.ui.theme.White
import org.intellij.lang.annotations.JdkConstants.HorizontalAlignment
import java.time.LocalDate
import java.time.format.DateTimeFormatter

val isBlockClicked = mutableStateOf(false)
var blockCounter = mutableStateOf(0)
var iconBlockCounter = mutableStateOf(0)
var blockSetterHeight = mutableStateOf(0.dp)
var blockSetterWidth = mutableStateOf(0.dp)
var clearBlocks = mutableStateOf(false)
var currentBlockIcon = mutableStateOf<String?>(null)
var iconMap = mutableListOf<MutableList<Int>>(
    mutableListOf(0, 0, 0, 0, 0, 0), // 00
    mutableListOf(0, 0, 0, 0, 0, 0), // 01
    mutableListOf(0, 0, 0, 0, 0, 0), // 02
    mutableListOf(0, 0, 0, 0, 0, 0), // 03
    mutableListOf(0, 0, 0, 0, 0, 0), // 04
    mutableListOf(0, 0, 0, 0, 0, 0), // 05
    mutableListOf(0, 0, 0, 0, 0, 0), // 06
    mutableListOf(0, 0, 0, 0, 0, 0), // 07
    mutableListOf(0, 0, 0, 0, 0, 0), // 08
    mutableListOf(0, 0, 0, 0, 0, 0), // 09
    mutableListOf(0, 0, 0, 0, 0, 0), // 10
    mutableListOf(0, 0, 0, 0, 0, 0), // 11
    mutableListOf(0, 0, 0, 0, 0, 0), // 12
    mutableListOf(0, 0, 0, 0, 0, 0), // 13
    mutableListOf(0, 0, 0, 0, 0, 0), // 14
    mutableListOf(0, 0, 0, 0, 0, 0), // 15
    mutableListOf(0, 0, 0, 0, 0, 0), // 16
    mutableListOf(0, 0, 0, 0, 0, 0), // 17
    mutableListOf(0, 0, 0, 0, 0, 0), // 18
    mutableListOf(0, 0, 0, 0, 0, 0), // 19
    mutableListOf(0, 0, 0, 0, 0, 0), // 20
    mutableListOf(0, 0, 0, 0, 0, 0), // 21
    mutableListOf(0, 0, 0, 0, 0, 0), // 22
    mutableListOf(0, 0, 0, 0, 0, 0), // 23
)
var nameMap = mutableListOf<MutableList<String?>>(
    mutableListOf<String?>(null, null, null, null, null, null), // 00
    mutableListOf<String?>(null, null, null, null, null, null), // 01
    mutableListOf<String?>(null, null, null, null, null, null), // 02
    mutableListOf<String?>(null, null, null, null, null, null), // 03
    mutableListOf<String?>(null, null, null, null, null, null), // 04
    mutableListOf<String?>(null, null, null, null, null, null), // 05
    mutableListOf<String?>(null, null, null, null, null, null), // 06
    mutableListOf<String?>(null, null, null, null, null, null), // 07
    mutableListOf<String?>(null, null, null, null, null, null), // 08
    mutableListOf<String?>(null, null, null, null, null, null), // 09
    mutableListOf<String?>(null, null, null, null, null, null), // 10
    mutableListOf<String?>(null, null, null, null, null, null), // 11
    mutableListOf<String?>(null, null, null, null, null, null), // 12
    mutableListOf<String?>(null, null, null, null, null, null), // 13
    mutableListOf<String?>(null, null, null, null, null, null), // 14
    mutableListOf<String?>(null, null, null, null, null, null), // 15
    mutableListOf<String?>(null, null, null, null, null, null), // 16
    mutableListOf<String?>(null, null, null, null, null, null), // 17
    mutableListOf<String?>(null, null, null, null, null, null), // 18
    mutableListOf<String?>(null, null, null, null, null, null), // 19
    mutableListOf<String?>(null, null, null, null, null, null), // 20
    mutableListOf<String?>(null, null, null, null, null, null), // 21
    mutableListOf<String?>(null, null, null, null, null, null), // 22
    mutableListOf<String?>(null, null, null, null, null, null) // 23
)
var currentName = mutableStateOf<String?>(null)
var iconCoords = mutableListOf<Pair<Int, Int>>()
var iconId = mutableStateOf<Int>(0)
var iconMapsCache = mutableMapOf<String, MutableList<MutableList<Int>>>()
var nameMapsCache = mutableMapOf<String, MutableList<MutableList<String?>>>()
var refreshTrigger by mutableStateOf(0)

@Composable
fun ScheduleScreen(navController: NavHostController, screenParameters: Pair<Int, Int>, vibratorService: Vibrator?) {
    //Log.i("screen_params", "Device width: ${screenParameters.first}, device height: ${screenParameters.second}")
    val inputvalue = remember { TextFieldState() }

    BlockTimerTheme {
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = Black
        ) {
            Column {
                Spacer(modifier = Modifier.height(20.dp))
                Date()
                Spacer(modifier = Modifier.height(20.dp))
                Blocks(screenParameters, vibratorService)
            }
            if(isBlockClicked.value) {
                Box(
                    contentAlignment = Alignment.BottomCenter,
                    modifier = Modifier
                        .padding(start = 10.dp , end = 10.dp, bottom = 10.dp)
                ) {
                    ColorMenu(screenParameters)
                }
            }
        }
    }
}

val hours = listOf<String>(
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23"
)

@Composable
fun Date() {
    var mutableDate by remember {
        mutableStateOf(LocalDate.now())
    }

    val mutableFormattedDate by remember(mutableDate) {
        derivedStateOf {
            mutableDate.format(DateTimeFormatter.ofPattern("yyyy/MM/dd"))
        }
    }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 20.dp)
    ) {
        Image(
            painter = painterResource(id = R.drawable.ic_chevron_left),
            contentDescription = null,
            modifier = Modifier
                .padding(end = 20.dp)
                .align(Alignment.CenterVertically) // Center vertically
                .clickable {
                    saveMaps(date = mutableFormattedDate)
                    mutableDate = mutableDate.minusDays(1)
                    resetMaps()
                    loadMaps(date = mutableFormattedDate)
                    refreshTrigger++
                }
        )

        Text(
            text = mutableFormattedDate,
            style = TextStyle(
                fontFamily = FontFamily(Font(R.font.majormono_regular)),
                fontSize = 24.sp,
                textAlign = TextAlign.Center,
                color = White,
            ),
        )

        Image(
            painter = painterResource(id = R.drawable.ic_chevron_right),
            contentDescription = null,
            modifier = Modifier
                .padding(start = 20.dp)
                .align(Alignment.CenterVertically) // Center vertically
                .clickable {
                    saveMaps(date = mutableFormattedDate)
                    mutableDate = mutableDate.plusDays(1)
                    resetMaps()
                    loadMaps(date = mutableFormattedDate)
                    refreshTrigger++
                }
        )
    }
}


@Composable
fun Blocks(screenParameters: Pair<Int, Int>, vibratorService: Vibrator?) {
    Box(
        modifier = Modifier
            .horizontalScroll(rememberScrollState())
    ) {
        Column(
            modifier = Modifier
                .verticalScroll(rememberScrollState())
        ) {
            for(hour in hours) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 5.dp, top = 5.dp, start = 20.dp)
                ) {
                    Text(
                        text = hour,
                        style = TextStyle(
                            fontFamily = FontFamily(Font(R.font.majormono_regular)),
                            fontSize = 24.sp,
                            color = White,
                        ),
                        modifier = Modifier
                            .padding(end = 20.dp)
                            .align(Alignment.CenterVertically)
                    )

                    repeat(6) {
                        var isFocused by remember { mutableStateOf(false) }
                        var ic by remember { mutableStateOf<String?>(null) }
                        val blockRow = hours.indexOf(hour)
                        val blockColumn = it

                        if(clearBlocks.value) {
                            isFocused = false
                            blockCounter.value = 0
                            Log.i("isFocused", isFocused.toString())
                        }

                        ic = updateIcon(blockRow, blockColumn)

                        Block(
                            defaultColor = Black,
                            borderColor = White,
                            isFocused = isFocused,
                            screenSize = screenParameters,
                            icon = ic,
                            onBlockClicked = {

                                clearBlocks.value = false
                                isFocused = !isFocused
                                vibrate(vibratorService)
                                if(isFocused) {
                                    blockCounter.value++
                                    iconCoords.add(Pair(blockRow, blockColumn))

                                } else {
                                    blockCounter.value--
                                    iconCoords.remove(Pair(blockRow, blockColumn))

                                }

                                isBlockClicked.value = blockCounter.value > 0
                            },
                            modifier = Modifier
                                .align(Alignment.CenterVertically)
                        )

                        Spacer(modifier = Modifier.width(10.dp))
                    }

                    LaunchedEffect(refreshTrigger) {
                        refreshTrigger--
                        // just for ui refresh
                    }
                }
            }
            if(isBlockClicked.value) {
                Spacer(modifier = Modifier.height(blockSetterHeight.value + 20.dp))
            } else {
                Spacer(modifier = Modifier.height(20.dp))
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ColorMenu(screenParameters: Pair<Int, Int>, inputvalue : TextFieldState = remember { TextFieldState() }) {
    val icons = (1..19).map { "ic_$it" }
    val scrollState = rememberScrollState()
    val density = LocalDensity.current

    Column(
        modifier = Modifier
            .background(
                color = Black,
                shape = RoundedCornerShape(15.dp)
            )
            .border(
                width = 1.dp,
                color = White,
                shape = RoundedCornerShape(15.dp)
            )
            .onGloballyPositioned {
                blockSetterHeight.value = with(density) {
                    it.size.height.toDp()
                }

                blockSetterWidth.value = with(density) {
                    it.size.width.toDp()
                }
            }
        ) {

        Row(
            horizontalArrangement = Arrangement.End,
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 20.dp, end = 20.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_check),
                contentDescription = null,
                modifier = Modifier
                    .padding(start = 5.dp, end = 5.dp)
                    .size(30.dp)
                    .clickable {
                        refreshTrigger++
                        isBlockClicked.value = false
                        clearBlocks.value = true

                        currentName.value = inputvalue.text

                        for(i in iconCoords) {
                            setName(i.first, i.second, currentName.value)
                        }

                        iconCoords.clear()
                    }
            )
        }

        OutlinedTextField(
            value = inputvalue.text,
            onValueChange = {
                inputvalue.text = it

            },
            label = {
                Text(
                    text = "Task name",
                    style = TextStyle(
                        fontFamily = FontFamily(Font(R.font.sometypemono_italic)),
                        fontSize = 16.sp,
                        color = White,
                    ),
                )
            },
            modifier = Modifier
                .padding(start = 20.dp, end = 20.dp, bottom = 20.dp, top = 5.dp)
                .fillMaxWidth(),
            textStyle = TextStyle(
                color = White,
                fontSize = 16.sp,
                fontFamily = FontFamily(Font(R.font.sometypemono_regular)),
            ),
            singleLine = true,
            shape = RoundedCornerShape(10.dp),
            colors = TextFieldDefaults.outlinedTextFieldColors(
                    focusedBorderColor = White,
                    unfocusedBorderColor = White
            )
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, end = 20.dp, bottom = 20.dp)
                .horizontalScroll(scrollState)
        ) {
            for(icon in icons) {
                var blockNumber by remember { mutableStateOf(0) }
                val localIconId = (icons.indexOf(icon)) + 1

                Block(
                    defaultColor = Black,
                    borderColor = White,
                    isFocused = iconBlockCounter.value > 0 && iconBlockCounter.value == blockNumber,
                    screenSize = screenParameters,
                    icon = icon,
                    onBlockClicked = {
                        refreshTrigger++
                        iconBlockCounter.value++
                        blockNumber = iconBlockCounter.value
                        currentBlockIcon.value = icon
                        iconId.value = localIconId

                        for(i in iconCoords) {
                            setIcon(i.first, i.second, icons.indexOf(icon)+1)
                        }
                    },
                )
                Spacer(modifier = Modifier.width(5.dp))

            }
        }
    }
}

fun vibrate(vibratorService: Vibrator?) {
    vibratorService!!.vibrate(VibrationEffect.createOneShot(50, VibrationEffect.DEFAULT_AMPLITUDE))
}

fun setIcon(
    blockRow: Int,
    blockColumn: Int,
    currentIcon: Int
) {
    Log.i("iconMap", "$blockRow, $blockColumn, $currentIcon")
    iconMap[blockRow][blockColumn] = currentIcon
}

fun updateIcon(
    blockRow: Int,
    blockColumn: Int
): String? {
    return when (val value = iconMap[blockRow][blockColumn]) {
        in 1..19 -> "ic_$value"
        else -> null
    }
}


fun saveMaps(
    date: String,
) {
    iconMapsCache[date] = iconMap.map { it.toMutableList() }.toMutableList()
    nameMapsCache[date] = nameMap.map { it.toMutableList() }.toMutableList()
}

fun resetMaps() {
    for (list in iconMap) {
        for (i in list.indices) {
            list[i] = 0
        }
    }

    for (list in nameMap) {
        for (i in list.indices) {
            list[i] = null
        }
    }
}

fun loadMaps(
    date: String
) {
    iconMapsCache[date]?.let { nonNullMap ->
        iconMap = nonNullMap.map { it.toMutableList() }.toMutableList()
    }

    nameMapsCache[date]?.let { nonNullMap ->
        nameMap = nonNullMap.map { it.toMutableList() }.toMutableList()
    }
    Log.i("nameMapsCache", "$date -> ${ nameMapsCache[date] }")

}

fun setName(
    blockRow: Int,
    blockColumn: Int,
    currentText: String?
) {
    nameMap[blockRow][blockColumn] = currentText
}